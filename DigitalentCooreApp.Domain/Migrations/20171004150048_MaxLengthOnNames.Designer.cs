// <auto-generated />
using DigitalentCoreApp.Domain.DAL;
using DigitalentCoreApp.Domain.DbEntities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace DigitalentCoreApp.Domain.Migrations
{
    [DbContext(typeof(DigitalentContext))]
    [Migration("20171004150048_MaxLengthOnNames")]
    partial class MaxLengthOnNames
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DigitalentCoreApp.Domain.DbEntities.Assignment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AssignmentDate");

                    b.Property<int?>("AssignmentType");

                    b.Property<int>("ConsultantID");

                    b.Property<int>("ProjectID");

                    b.HasKey("ID");

                    b.HasIndex("ConsultantID");

                    b.HasIndex("ProjectID");

                    b.ToTable("Assignment");
                });

            modelBuilder.Entity("DigitalentCoreApp.Domain.DbEntities.Consultant", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Adress");

                    b.Property<DateTime>("BirthDate");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .HasMaxLength(50);

                    b.Property<string>("Phone");

                    b.Property<int?>("ProjectID");

                    b.Property<string>("ZipCode");

                    b.HasKey("ID");

                    b.HasIndex("ProjectID");

                    b.ToTable("Consultant");
                });

            modelBuilder.Entity("DigitalentCoreApp.Domain.DbEntities.ConsultantSkill", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ConsultantID");

                    b.Property<int>("SkillID");

                    b.HasKey("ID");

                    b.HasIndex("ConsultantID");

                    b.HasIndex("SkillID");

                    b.ToTable("ConsultantSkill");
                });

            modelBuilder.Entity("DigitalentCoreApp.Domain.DbEntities.Photo", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ConsultantID");

                    b.Property<int>("Height");

                    b.Property<string>("Url");

                    b.Property<int>("Width");

                    b.HasKey("ID");

                    b.HasIndex("ConsultantID")
                        .IsUnique();

                    b.ToTable("Photo");
                });

            modelBuilder.Entity("DigitalentCoreApp.Domain.DbEntities.Project", b =>
                {
                    b.Property<int>("ID");

                    b.Property<string>("Name");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("ID");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("DigitalentCoreApp.Domain.DbEntities.Skill", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("Skill");
                });

            modelBuilder.Entity("DigitalentCoreApp.Domain.DbEntities.Assignment", b =>
                {
                    b.HasOne("DigitalentCoreApp.Domain.DbEntities.Consultant", "Consultant")
                        .WithMany("Assignments")
                        .HasForeignKey("ConsultantID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DigitalentCoreApp.Domain.DbEntities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DigitalentCoreApp.Domain.DbEntities.Consultant", b =>
                {
                    b.HasOne("DigitalentCoreApp.Domain.DbEntities.Project")
                        .WithMany("Consulatants")
                        .HasForeignKey("ProjectID");
                });

            modelBuilder.Entity("DigitalentCoreApp.Domain.DbEntities.ConsultantSkill", b =>
                {
                    b.HasOne("DigitalentCoreApp.Domain.DbEntities.Consultant", "Consultant")
                        .WithMany("ConsultantSkills")
                        .HasForeignKey("ConsultantID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DigitalentCoreApp.Domain.DbEntities.Skill", "Skill")
                        .WithMany("ConsultantSkills")
                        .HasForeignKey("SkillID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DigitalentCoreApp.Domain.DbEntities.Photo", b =>
                {
                    b.HasOne("DigitalentCoreApp.Domain.DbEntities.Consultant", "Consultant")
                        .WithOne("Photo")
                        .HasForeignKey("DigitalentCoreApp.Domain.DbEntities.Photo", "ConsultantID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
